@model PresentationLayer.Areas.SysAdmin.Models.StudentParentVM
@using Telerik.Web.Mvc.UI;@using PresentationLayer.Other;
@using myRes=PresentationLayer.LocalResource.Resource;
@{  System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["Culture"].ToString());
  System.Threading.Thread.CurrentThread.CurrentCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;}

@{
    ViewBag.Title = myRes.Update;
}
<style>
    table {
        width: 100%;
        /*background-color: gray;*/
    }
    /*table tr td{
        width: 16.66%;
    }*/

    .tdfirst {
        text-align: right;
        width:13%;
    }

    .tdthird {
        text-align: right;
        width: 10%;
    }

    .tdfive {
        text-align: right;
        width: 10%;
    }

    .backgrounddiv {
        background-color: lightgray;
        border-radius: 25px;
        margin: 5px;
        padding: 5px;
    }
</style>

@section Scripts {
    @*dataTyp: "html",*@
    <script type="text/javascript">
        $(document).ready(function () {
            $("#CurrentPinCode").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A, Command+A
                    (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right, down, up
                    (e.keyCode >= 35 && e.keyCode <= 40)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
            $("#MobileNo").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A, Command+A
                    (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right, down, up
                    (e.keyCode >= 35 && e.keyCode <= 40)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        })@* End document ready *@

    </script>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>@myRes.UpdateParentDetails</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Status)

        <div class="backgrounddiv">
            <table>
                <tr>
                    <td class="tdfirst">@Html.LabelForRequired(model => model.StudentId)</td>
                    <td colspan="3">
                        @Html.TextBoxFor(model => model.StudentId, new { @readonly = "readonly", @style = "width : 80px;" })
                    @Html.ValidationMessageFor(model => model.StudentId)
                    @Html.TextBoxFor(model => model.StudentFullNameWithTitle, new { disabled = "disabled", @readonly = "readonly", @style = "width : 250px;" })
                    @Html.ValidationMessageFor(model => model.StudentFullNameWithTitle)

                </td>
                @*<td class="tdthird"></td>
                    <td>

                    </td>
                    <td class="tdfive"></td>
                    <td>

                    </td>*@
            </tr>
            <tr>
                <td class="tdfirst">@Html.LabelForRequired(model => model.Title)</td>
                <td>
                    @Html.Telerik().DropDownListFor(model => model.Title).Items(item =>
    {
        item.Add().Text(myRes.Mr).Value("Mr");
        item.Add().Text(myRes.Mrs).Value("Mrs");

    }).Placeholder(@myRes.SelectTitle)
                @Html.ValidationMessageFor(model => model.Title)
            </td>
            <td class="tdthird"></td>
            <td></td>
            <td class="tdfive"></td>
            <td></td>
        </tr>
        <tr>
            <td class="tdfirst">@Html.LabelForRequired(model => model.FirstName)</td>
            <td>
                @Html.TextBoxFor(model => model.FirstName)
            @Html.ValidationMessageFor(model => model.FirstName)
        </td>
        <td class="tdthird">@Html.LabelForRequired(model => model.MiddleName)</td>
        <td>
            @Html.TextBoxFor(model => model.MiddleName)
        @Html.ValidationMessageFor(model => model.MiddleName)
    </td>
    <td class="tdfive">@Html.LabelForRequired(model => model.LastName)</td>
    <td>
        @Html.TextBoxFor(model => model.LastName)
    @Html.ValidationMessageFor(model => model.LastName)
</td>
</tr>
<tr>
    <td class="tdfirst">@Html.LabelForRequired(model => model.Gender)</td>
    <td>
        @Html.Telerik().DropDownListFor(model => model.Gender).Items(item =>
    {
        item.Add().Text(myRes.Male).Value("M");
        item.Add().Text(myRes.Female).Value("F");
    }).Placeholder(myRes.SelectGender)
    @Html.ValidationMessageFor(model => model.Gender)
</td>
<td class="tdthird">@Html.LabelForRequired(model => model.CurrentAddress)</td>
<td>@Html.TextAreaFor(model => model.CurrentAddress)
@Html.ValidationMessageFor(model => model.CurrentAddress)</td>
<td class="tdfive"></td>
<td></td>
</tr>
@*<tr>
    <td class="tdfirst"></td>
    <td>
       
</td>
    <td class="tdthird"></td>
    <td></td>
    <td class="tdfive"></td>
    <td></td>
                </tr>*@
    <tr>
        <td class="tdfirst">@Html.LabelForRequired(model => model.CurrentCountryId)</td>
        <td>@Html.Telerik().DropDownListFor(model => model.CurrentCountryId).BindTo(Model.Countries).Placeholder(myRes.SelectCountry).CascadeTo("CurrentStateId")
@Html.ValidationMessageFor(model => model.CurrentCountryId)</td>
        <td class="tdthird">@Html.LabelForRequired(model => model.CurrentStateId)</td>
        <td>@Html.Telerik().DropDownListFor(model => model.CurrentStateId).DataBinding(binding => binding.Ajax().Select("GetStatesList", "StudentAddress")).Placeholder(myRes.SelectState).CascadeTo("CurrentDistrictId")
@Html.ValidationMessageFor(model => model.CurrentStateId)</td>

        <td class="tdfirst">@Html.LabelForRequired(model => model.CurrentDistrictId)</td>
        <td>
            @Html.Telerik().DropDownListFor(model => model.CurrentDistrictId).DataBinding(binding => binding.Ajax().Select("GetDistrictList", "StudentAddress")).Placeholder(@myRes.SelectDistrict).CascadeTo("CurrentCityId")
            @Html.ValidationMessageFor(model => model.CurrentDistrictId)
        </td>

        <td class="tdfive">@Html.LabelForRequired(model => model.CurrentCityId)</td>
        <td>
            @Html.Telerik().DropDownListFor(model => model.CurrentCityId).DataBinding(binding => binding.Ajax().Select("GetCitiesList", "StudentAddress")).Placeholder(myRes.SelectCity)
        @Html.ValidationMessageFor(model => model.CurrentCityId)
    </td>
    </tr>
    <tr>
        <td class="tdfirst">@Html.LabelForRequired(model => model.CurrentPinCode)</td>
        <td>@Html.TextBoxFor(model => model.CurrentPinCode)
@Html.ValidationMessageFor(model => model.CurrentPinCode)</td>
        <td class="tdthird">@Html.LabelForRequired(model => model.MobileNo)</td>
        <td>@Html.TextBoxFor(model => model.MobileNo)
@Html.ValidationMessageFor(model => model.MobileNo)</td>
        <td class="tdfive">@Html.LabelForRequired(model => model.ContactNumber)</td>
        <td>@Html.TextBoxFor(model => model.ContactNumber)
@Html.ValidationMessageFor(model => model.ContactNumber)</td>
    </tr>
    <tr>
        <td class="tdfirst">@Html.LabelForRequired(model => model.Occupation)</td>
        <td>@Html.Telerik().DropDownListFor(model => model.Occupation).Items(item =>
    {
        item.Add().Text(myRes.Business).Value("Business");
        item.Add().Text(myRes.Service).Value("Service");
    }).Placeholder(myRes.SelectOccupation)
@Html.ValidationMessageFor(model => model.Occupation)</td>
        <td class="tdthird">@Html.LabelForRequired(model => model.CompanyName)</td>
        <td>@Html.TextBoxFor(model => model.CompanyName)
@Html.ValidationMessageFor(model => model.CompanyName)</td>
        <td class="tdfive"></td>
        <td></td>
    </tr>
    <tr>
        <td class="tdfirst">@Html.LabelForRequired(model => model.CompanyAddress)</td>
        <td>@Html.TextAreaFor(model => model.CompanyAddress)
@Html.ValidationMessageFor(model => model.CompanyAddress)</td>
        <td class="tdthird">@Html.LabelForRequired(model => model.CompanyContactNo)</td>
        <td>@Html.TextBoxFor(model => model.CompanyContactNo)
@Html.ValidationMessageFor(model => model.CompanyContactNo)</td>
        <td class="tdfive"></td>
        <td></td>
    </tr>
    <tr>
        <td class="tdfirst">@Html.LabelForRequired(model => model.BankName)</td>
        <td>@Html.EditorFor(model => model.BankName)
@Html.ValidationMessageFor(model => model.BankName)</td>
        <td class="tdthird">@Html.LabelForRequired(model => model.AccountNo)</td>
        <td>@Html.EditorFor(model => model.AccountNo)
@Html.ValidationMessageFor(model => model.AccountNo)</td>
        <td class="tdfive">@Html.LabelForRequired(model => model.Branch)</td>
        <td>@Html.EditorFor(model => model.Branch)
@Html.ValidationMessageFor(model => model.Branch)</td>
    </tr>
                <tr>
                    <td class="tdfirst">@Html.LabelForRequired(model => model.IFSCCode)</td>
                    <td>@Html.EditorFor(model => model.IFSCCode)
@Html.ValidationMessageFor(model => model.IFSCCode)</td>
                    <td class="tdthird"></td>
                    <td></td>
                    <td class="tdfive"></td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdfirst">@Html.LabelForRequired(model => model.Remark)</td>
                    <td>@Html.EditorFor(model => model.Remark)
@Html.ValidationMessageFor(model => model.Remark)</td>
                    <td class="tdthird"></td>
                    <td></td>
                    <td class="tdfive"></td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdfirst"></td>
                    <td></td>
                    <td class="tdthird"></td>
                    <td></td>
                    <td class="tdfive"></td>
                    <td></td>
                </tr>
            </table>
</div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value=@myRes.Update class="btn btn-success" />
                @Html.ActionLink(myRes.BackToList, "Index", new { Controller = "Student", Area = "SysAdmin" }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}
