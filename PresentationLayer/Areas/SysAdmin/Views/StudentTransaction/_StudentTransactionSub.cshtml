@model Telerik.Web.Mvc.GridModel<PresentationLayer.Areas.SysAdmin.Models.StudentTransactionSubVM>
@using Telerik.Web.Mvc.UI;
@using myRes=PresentationLayer.LocalResource.Resource;
@{  System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(System.Configuration.ConfigurationManager.AppSettings["Culture"].ToString());
  System.Threading.Thread.CurrentThread.CurrentCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;}
@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
        });
        
        
    
    </script>}
@(Html.Telerik().Grid<PresentationLayer.Areas.SysAdmin.Models.StudentTransactionSubVM>(Model.Data)
        .Name("Grid")
            .DataKeys(keys => keys.Add(c => c.FeeHeadId))
        .Editable(editing => editing.Mode(GridEditMode.PopUp))
        .DataBinding(dataBinding => dataBinding
            .Server()
           
           .Update("SubEdit", "StudentTransaction")
    )
        .ClientEvents(events => events.OnCommand("Grid_onCommand"))
        .Columns(columns =>
        {
            columns.Command(commands =>
            {
                commands.Edit().ImageHtmlAttributes(new { @class = "t-edit" }).ButtonType(GridButtonType.Image).HtmlAttributes(new { title = "Edit" });
            }).Width(40).Title(myRes.Edit);
            columns.Bound(p => p.FeeHeadId).ReadOnly(true);
            columns.Bound(p => p.FeeHeadName).ReadOnly(true);
            columns.Bound(p => p.Cr).ClientTemplate("<#= Cr #");
            columns.Bound(p => p.Dr);
            columns.Bound(p => p.Balance).ReadOnly(true);
        }).Resizable(command => command.Columns(true))

)
